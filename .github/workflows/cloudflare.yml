# .github/workflows/shopify.yml
name: Shopify

on:
  push:
    branches: ['**']
  workflow_dispatch: {}

env:
  NODE_VERSION: '20'
  BRANCH_STAGING: ${{ vars.BRANCH_STAGING || 'staging' }}
  BRANCH_PRODUCTION: ${{ vars.BRANCH_PRODUCTION || 'production' }}

jobs:
  deploy-staging:
    name: Deploy (Staging)
    if: ${{ github.ref == format('refs/heads/{0}', env.BRANCH_STAGING) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - run: npm i -g @shopify/cli@latest
      - name: Build extensions
        run: npx shopify app build
        env:
          SHOPIFY_API_KEY: ${{ vars.SHOPIFY_API_KEY }}
      - name: Deploy extensions (staging)
        run: npx shopify app deploy --force --message "${{ github.ref_name }}:${{ github.sha }}" --version "deploy:${{ github.sha }}"
        env:
          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}

  deploy-production:
    name: Deploy (Production)
    if: ${{ github.ref == format('refs/heads/{0}', env.BRANCH_PRODUCTION) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - run: npm i -g @shopify/cli@latest
      - name: Build extensions
        run: npx shopify app build
        env:
          SHOPIFY_API_KEY: ${{ vars.SHOPIFY_API_KEY }}
      - name: Use production Shopify config
        run: cp shopify.app.prod.toml shopify.app.toml
      - name: Read Shopify client id
        id: shopify
        run: |
          CLIENT_ID=$(awk -F= '/^client_id/ {gsub(/[" ]/,"",$2); print $2}' shopify.app.toml)
          if [ -z "$CLIENT_ID" ]; then echo "client_id missing in shopify.app.toml" && exit 1; fi
          echo "client_id=$CLIENT_ID" >> "$GITHUB_OUTPUT"
      - name: Deploy extensions (production)
        run: >-
          npx shopify app deploy
          --client-id ${{ steps.shopify.outputs.client_id }}
          --force
          --message "${{ github.ref_name }}:${{ github.sha }}"
          --version "deploy:${{ github.sha }}"
        env:
          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}

# .github/workflows/cloudflare.yml
name: Cloudflare

on:
  push:
    branches: ['**']
  workflow_dispatch: {}

env:
  NODE_VERSION: '20'
  BRANCH_STAGING: ${{ vars.BRANCH_STAGING || 'staging' }}
  BRANCH_PRODUCTION: ${{ vars.BRANCH_PRODUCTION || 'production' }}

jobs:
  deploy-staging:
    name: Deploy (Staging)
    if: ${{ github.ref == format('refs/heads/{0}', env.BRANCH_STAGING) && vars.CF_GIT_INTEGRATION != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
        env:
          NPM_CONFIG_ENGINE_STRICT: true
          NPM_CONFIG_FUND: false
          NPM_CONFIG_PROGRESS: false
      - name: Build web (React Router)
        run: npm run build:web
      - name: Inject runtime vars into built wrangler config
        run: |
          node -e "
            const fs = require('fs');
            const p = 'build/server/wrangler.json';
            const j = JSON.parse(fs.readFileSync(p,'utf8'));
            j.vars = j.vars || {};
            j.vars.DUTCH_FURNITURE_BASE_URL = process.env.DFB;
            j.vars.DUTCHNED_API_URL = process.env.DNA;
            fs.writeFileSync(p, JSON.stringify(j, null, 2));
            console.log('Updated vars in', p);
          "
        env:
          DFB: ${{ vars.DUTCH_FURNITURE_BASE_URL }}
          DNA: ${{ vars.DUTCHNED_API_URL }}
      - name: Install Wrangler
        run: npm i -g wrangler@4.30.0
      - name: Deploy Worker (staging)
        run: wrangler deploy -c build/server/wrangler.json --keep-vars
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-production:
    name: Deploy (Production)
    if: ${{ github.ref == format('refs/heads/{0}', env.BRANCH_PRODUCTION) && vars.CF_GIT_INTEGRATION != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
        env:
          NPM_CONFIG_ENGINE_STRICT: true
          NPM_CONFIG_FUND: false
          NPM_CONFIG_PROGRESS: false
      - name: Build web (React Router)
        run: npm run build:web
      - name: Inject runtime vars into built wrangler config
        run: |
          node -e "
            const fs = require('fs');
            const p = 'build/server/wrangler.json';
            const j = JSON.parse(fs.readFileSync(p,'utf8'));
            j.vars = j.vars || {};
            j.vars.DUTCH_FURNITURE_BASE_URL = process.env.DFB;
            j.vars.DUTCHNED_API_URL = process.env.DNA;
            fs.writeFileSync(p, JSON.stringify(j, null, 2));
            console.log('Updated vars in', p);
          "
        env:
          DFB: ${{ vars.DUTCH_FURNITURE_BASE_URL }}
          DNA: ${{ vars.DUTCHNED_API_URL }}
      - name: Install Wrangler
        run: npm i -g wrangler@4.30.0
      - name: Deploy Worker (production)
        run: wrangler deploy -c build/server/wrangler.json --keep-vars
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}


