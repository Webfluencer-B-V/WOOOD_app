name: Cloudflare

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
    tags: [releases/*]
  pull_request:
    branches: [main]

env:
  WRANGLER_SEND_METRICS: false
  NODE_VERSION: '22'

jobs:
  build:
    name: Build
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - run: npm run build --ignore-scripts
        env:
          SHOPIFY_API_KEY: ${{ vars.SHOPIFY_API_KEY }}
      - run: npm test
        if: ${{ github.event_name == 'pull_request' }}
        env:
          SHOPIFY_API_SECRET_KEY: ${{ secrets.SHOPIFY_API_SECRET_KEY }}
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  preview:
    name: Preview
    if: ${{ github.ref_type == 'branch' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - run: |
          SHORT_SHA=${GITHUB_SHA::7}
          npx wrangler versions upload --message="${{ github.ref_name }}" --tag="$SHORT_SHA"
        working-directory: build/server
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  release:
    name: Release
    if: ${{ github.ref_type == 'tag' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Read package.json version
        id: pkg
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PKG_VERSION" >> "$GITHUB_OUTPUT"
      - name: Extract version from tag
        id: version
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^releases\///')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Ensure tag matches package.json version
        run: |
          if [ "${{ steps.pkg.outputs.version }}" != "${{ steps.version.outputs.version }}" ]; then
            echo "Tag version (${{ steps.version.outputs.version }}) does not match package.json (${{ steps.pkg.outputs.version }})" >&2
            exit 1
          fi
      - name: Prepare production Wrangler config
        run: |
          jq -s '
            .[0] as $base | .[1] as $prod | $base
            | .name = $prod.name
            | .account_id = $prod.account_id
            | .vars = $prod.vars
            | .kv_namespaces = $prod.kv_namespaces
            | .queues = $prod.queues
            | .triggers = $prod.triggers
            | .observability = $prod.observability
            | .placement = $prod.placement
          ' build/server/wrangler.json wrangler.prod.json > build/server/wrangler.prod.json
      - name: Upload production version
        id: upload
        run: |
          OUTPUT=$(npx wrangler versions upload --message="release-${{ steps.pkg.outputs.version }}" --tag="${{ steps.pkg.outputs.version }}" --config=wrangler.prod.json)
          echo "$OUTPUT"
          VERSION_ID=$(echo "$OUTPUT" | grep -oE 'Worker Version ID: [A-Za-z0-9-]+' | awk '{print $4}' | head -n1)
          if [ -z "$VERSION_ID" ]; then
            echo "Failed to parse Worker Version ID from upload output" >&2
            exit 1
          fi
          echo "version_id=$VERSION_ID" >> "$GITHUB_OUTPUT"
        working-directory: build/server
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NO_COLOR: "1"
      - name: Deploy production version
        run: |
          npx wrangler versions deploy --version-id "${{ steps.upload.outputs.version_id }}" --message="release-${{ steps.pkg.outputs.version }}" --config=wrangler.prod.json
        working-directory: build/server
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NO_COLOR: "1"
