name: Cloudflare

concurrency:
  group: cloudflare
  cancel-in-progress: true

on:
  push:
    branches:
      - '**'
    tags:
      - 'releases/*'
  workflow_dispatch: {}

env:
  NODE_VERSION: 20.19.4
  WRANGLER_SEND_METRICS: false
  BRANCH_STAGING: ${{ vars.BRANCH_STAGING || 'staging' }}
  BRANCH_PRODUCTION: ${{ vars.BRANCH_PRODUCTION || 'production' }}

jobs:
  build:
    name: Build
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - name: Build web (React Router)
        run: npm run build:web
      - name: Build app (Shopify CLI)
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  deploy:
    name: Deploy
    needs: build
    if: ${{ vars.CF_GIT_INTEGRATION != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Determine environment
        id: env
        run: |
          BR_STG='${{ vars.BRANCH_STAGING || 'staging' }}'
          BR_PRD='${{ vars.BRANCH_PRODUCTION || 'production' }}'
          REF='${{ github.ref }}'
          if [ "$REF" = "refs/heads/$BR_STG" ]; then echo "name=staging" >> "$GITHUB_OUTPUT"; exit 0; fi
          if [ "$REF" = "refs/heads/$BR_PRD" ]; then echo "name=production" >> "$GITHUB_OUTPUT"; exit 0; fi
          echo "name=skip" >> "$GITHUB_OUTPUT"
      - name: Prepare built wrangler config (staging)
        if: ${{ steps.env.outputs.name == 'staging' }}
        run: |
          mkdir -p build/server
          jq '.main="build/server/index.js" | .assets.directory="build/client"' wrangler.json > build/server/wrangler.merged.json
      - name: Deploy Cloudflare Worker (staging)
        if: ${{ steps.env.outputs.name == 'staging' }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: deploy -c build/server/wrangler.merged.json --keep-vars
      - name: Prepare built wrangler config (production)
        if: ${{ steps.env.outputs.name == 'production' }}
        run: |
          mkdir -p build/server
          jq '.main="build/server/index.js" | .assets.directory="build/client"' wrangler.production.json > build/server/wrangler.merged.json
      - name: Deploy Cloudflare Worker (production)
        if: ${{ steps.env.outputs.name == 'production' }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: deploy -c build/server/wrangler.merged.json --keep-vars


