name: Shopify

concurrency:
  group: shopify
  cancel-in-progress: true

on:
  push:
    branches:
      - '**'
    tags:
      - 'releases/*'
  workflow_dispatch: {}

env:
  NODE_VERSION: 20.19.4
  SHOPIFY_CLI_NO_ANALYTICS: true
  BRANCH_STAGING: ${{ vars.BRANCH_STAGING || 'staging' }}
  BRANCH_PRODUCTION: ${{ vars.BRANCH_PRODUCTION || 'production' }}

jobs:
  build:
    name: Build Extensions
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - run: npm install -g @shopify/cli@latest
      - name: Build (Shopify)
        run: npx shopify app build
        env:
          SHOPIFY_API_KEY: ${{ vars.SHOPIFY_API_KEY }}
      - uses: actions/upload-artifact@v4
        with:
          name: extensions
          path: extensions

  deploy:
    name: Deploy
    needs: build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Decide target env
        id: env
        run: |
          BR_STG='${{ vars.BRANCH_STAGING || 'staging' }}'
          BR_PRD='${{ vars.BRANCH_PRODUCTION || 'production' }}'
          REF='${{ github.ref }}'
          if [ "$REF" = "refs/heads/$BR_STG" ]; then echo "name=staging" >> "$GITHUB_OUTPUT"; exit 0; fi
          if [ "$REF" = "refs/heads/$BR_PRD" ]; then echo "name=production" >> "$GITHUB_OUTPUT"; exit 0; fi
          echo "name=skip" >> "$GITHUB_OUTPUT"
      - uses: actions/download-artifact@v4
        with:
          name: extensions
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm install -g @shopify/cli@latest
      - name: Use production Shopify config
        if: ${{ steps.env.outputs.name == 'production' }}
        run: cp shopify.app.prod.toml shopify.app.toml
      - name: Read Shopify client id
        id: shopify
        run: |
          CLIENT_ID=$(awk -F= '/^client_id/ {gsub(/[" ]/ ,"", $2); print $2}' shopify.app.toml)
          if [ -z "$CLIENT_ID" ]; then echo "client_id missing in shopify.app.toml" && exit 1; fi
          echo "client_id=$CLIENT_ID" >> "$GITHUB_OUTPUT"
      - name: Deploy (Shopify App - staging)
        if: ${{ steps.env.outputs.name == 'staging' }}
        run: >-
          npx shopify app deploy
          --force
          --message "${{ github.ref_name }}:${{ github.sha }}"
          --version "deploy:${{ github.sha }}"
        env:
          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}
      - name: Deploy (Shopify App - production)
        if: ${{ steps.env.outputs.name == 'production' }}
        run: >-
          npx shopify app deploy
          --client-id ${{ steps.shopify.outputs.client_id }}
          --force
          --message "${{ github.ref_name }}:${{ github.sha }}"
          --version "deploy:${{ github.sha }}"
        env:
          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}


